app.controller('UsersIndexCtrl', function($scope, $http, Auth){

    $http.get(Routes.users_path({format: "json"})).
        then(function (response) {
            $scope.users = response.data;
        });

    $scope.destroy = function(user){
        $http.delete(Routes.user_path(user.id)).
        then(function(){
            Materialize.toast('User ' + user.name + ' deleted');
        });
        var index = $scope.users.findIndex(function(o){
            return o.id === user.id;
        });
        $scope.users.splice(index, 1);
    };
});


app.controller('UserCtrl', function($scope, $http, Auth) {
    var location = document.location.pathname;
    var params = parse_url(location);
    var doOnce = true;
    $scope.isDragDisabled = true;
    $scope.hashtagEditMode = false;
    $scope.partial = 'slideshow';
    $scope.currentAccountPermitted = false;

    var promise = $http
        .get(Routes.user_path(params.users, {format: "json"}))
        .then(function (response) {
            return response;
        });

    promise.then(function (response) {
        $scope.user = response.data;
        $scope.action = $scope.user.id ? 'PATCH' : 'POST';
        if($scope.user.photos.length == 0) {
            $scope.setup();
        }
        Auth.currentUser().then(function(account) {
            $scope.loggedIn = true;
            $scope.currentAccountPermitted = account.role == 'admin' || account.user_id == $scope.user.id;
        }, function(error) {
            $scope.loggedIn = false;
        });
        $scope.configure();
    });


    $scope.editAvatar = function () {
        $('#avatar-modal').modal('open');
    };

    $scope.setAvatar = function (newAvatar) {
        $scope.user.avatar_id = newAvatar.id;

        $http({
            method: 'PATCH',
            url: Routes.user_path($scope.user.id),
            data: {'user': $scope.user}
        })
            .then(function (data) {
                Materialize.toast('Status' + data.status, 1000);
                $scope.user.avatar = newAvatar;
                $('#avatar-modal').modal('close');
            }, function (data) {
                Materialize.toast(data.status, 1000);
            });
    };

    $scope.submit = function (form) {
        $scope.$submitted = true;

        if (form.$invalid) {
            Materialize.toast('Form is invalid', 1000);
            return;
        }

        $scope.user.preferences = [];
        $('input[type="checkbox"]:checked').each(function () {
            $scope.user.preferences.push({id: $(this).val(), value: $(this).attr('id')});
        });

        $http({
            method: $scope.action,
            url: Routes.user_path($scope.user.id ? $scope.user.id : ''),
            data: {user: $scope.user}
        })
            .then(function (data) {
                Materialize.toast('Status' + data.status, 1000);
            }, function (data) {
                Materialize.toast(data.status, 1000);
            });
    };

    $scope.editHashtags = function () {
        $scope.hashtagEditMode = true;
    };

    $scope.setup = function () {
        //retarded materialize modals
        $('.modal').modal({
            ready: function(modal, trigger) {
                var id = modal.attr('id').replace('photo', '');
                $http({
                    method: 'GET',
                    url: Routes.user_photo_hashtags_path(1, 1)
                })
                    .then(function (data) {
                        var chipsAutocompleteData = {};
                        var chipsData = [];

                        data.data.forEach(function(item, i, arr){
                            chipsAutocompleteData[item.tag] = null; //setup for materialize chips autocomplete
                        });

                        $('.chip' + id).each(function (index, element) {
                            chipsData.push({tag: $(this).text()});
                        });

                        $('.chips-autocomplete').material_chip({
                            data: chipsData,
                            autocompleteOptions: {
                                data: chipsAutocompleteData,
                                limit: 10,
                                minLength: 2
                            }
                        });
                    }, function (data) {
                        Materialize.toast('Hashtags loading error, status: ' + data.status, 1000);
                    });

            }
        });

        if(doOnce) {
            $('.chips-autocomplete').on('chip.add', function (e, chip) {
                $http({
                    method: 'POST',
                    url: Routes.user_photo_hashtags_path($scope.user.id, $(this).attr('id').replace('chips', '')),
                    data: {hashtag: {tag: chip.tag}}
                })
                    .then(function (data) {
                        Materialize.toast('Status' + data.status, 1000);
                    }, function (data) {
                        Materialize.toast('Hashtag add error, status: ' + data.status, 1000);
                    });
            });
            $('.chips-autocomplete').on('chip.delete', function (e, chip) {
                $http({
                    method: 'DELETE',
                    url: Routes.user_photo_hashtag_path($scope.user.id, $(this).attr('id').replace('chips', ''), chip.tag.trim().replace('#','')),
                    data: {hashtag: {tag: chip.tag.trim().replace('#','')}}
                })
                    .then(function (data) {
                        Materialize.toast('Status' + data.status, 1000);
                    }, function (data) {
                        Materialize.toast('Hashtag add error, status: ' + data.status, 1000);
                    });
            });
            $scope.visualizePreferences();
            doOnce = false;
        }
    };


    $scope.rate = function(photo, rating) {
        $('.btn-rating').prop('disabled', true);
        $http({
            method: 'POST',
            url: Routes.user_photo_rates_path($scope.user.id, photo.id),
            data: {rate: {value: rating}}
        })
            .then(function (data) {
                Materialize.toast('Status' + data.status, 1000);
            }, function (data) {
                Materialize.toast(data.status, 1000);
            });
    };

    $scope.deletePhoto = function(user_id, photo) {
        $http({
            method: 'DELETE',
            url: Routes.user_photo_path(user_id, photo.id)
        })
            .then(function (response){
                window.location.reload();
            });
    };

    $scope.show = function(partial_name) {
        $scope.partial = partial_name;
        if(partial_name == 'slideshow'){
            var slick = $('slick');
            slick.slick('unslick');
            slick.slick();
            slick.slick('slickNext');
        }
    };

    $scope.editPriorities = function() {
        $scope.sortPhotosByPriority($scope.user.photos);
        $scope.isDragDisabled = false;
    };

    $scope.applyPriorities = function() {
        $http({
            method: 'PATCH',
            url: Routes.update_priorities_user_photos_path($scope.user.id),
            data: {photos: $scope.user.photos}
        })
            .then(function (data) {
                Materialize.toast('Status' + data.status, 1000);
            }, function (data) {
                Materialize.toast(data.status, 1000);
            });

        $scope.isDragDisabled = true;
    };

    $scope.discardPriorities = function() {
        $scope.isDragDisabled = true;
        $scope.sortPhotosByPriority();
    };

    $scope.dragControlListeners = {
        orderChanged: function(){
            $scope.setupPhotoPriorities();
        }
    };

    $scope.checkPreference = function(id) {
        id = id - 0;
        for(i in $scope.user.preferences) {
            var preference = $scope.user.preferences[i];
            if (preference.id == id) {
                return true;
            }
        }
        return false;
    };

    $scope.sortPhotosByPriority = function() {
        $scope.user.photos.sort(function(a,b){
            return a.priority - b.priority;
        });
    };

    $scope.sortPhotosByRating = function() {
        $scope.user.photos.sort(function(a,b){
            return b.rating - a.rating;
        });
    };

    $scope.visualizePreferences = function() {
        $('.preference-label').each(function (i, obj) {
            var value = obj.innerHTML;
            obj.innerHTML = '<img src="/assets/' + value + '.png" alt="' + value + '" class="tooltipped" data-position="top" data-delay="50" data-tooltip="'+ value +'"/>';
        });
        $('.tooltipped').tooltip();
    };

    $scope.configure = function() {
        if (!$scope.isReady) {
            $scope.sortPhotosByPriority();

            var dropzone = new Dropzone('#dropform');
            dropzone.on("success", function (file, response) {
                $scope.user.photos.push(response.response);
            });

            dropzone.on("error", function (file, errorMessage) {
                Materialize.toast(errorMessage.msg, 3000);
            });


            $scope.isReady = true;
        }
    };

    $scope.setupPhotoPriorities = function() {
        for(var i = 0; i < $scope.user.photos.length; i++){
            $scope.user.photos[i].priority = i;
        }
    }
});

app.directive('afterRender', ['$timeout', function ($timeout) {
    return {
        restrict: 'A',
            terminal: true,
            transclude: false,
            link: function (scope, element, attrs) {
            $timeout(scope.$eval(attrs.afterRender), 0);  //Calling a scoped method
        }
    };
}]);

