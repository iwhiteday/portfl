app.controller('UsersIndexCtrl', function($scope, $http){


    $http.get(Routes.users_path({format: "json"})).
        then(function (response) {
            $scope.users = response.data;
        });

    $scope.destroy = function(user){
        $http.delete(Routes.user_path(user.id)).
        then(function(){
            Materialize.toast('User ' + user.name + ' deleted');
        });
        var index = $scope.users.findIndex(function(o){
            return o.id === user.id;
        });
        $scope.users.splice(index, 1);
    };
});


app.controller('UserCtrl', function($scope, $http, $q) {
    var location = document.location.pathname;
    var params = parse_url(location);
    $scope.isDragDisabled = true;

    $http.get(Routes.user_path(params.users, {format: "json"}))
        .then(function (response) {
            $scope.user = response.data;
            $scope.action = $scope.user.id ? 'PATCH' : 'POST';
        });

    $scope.editAvatar = function () {
        $('#avatar-modal').modal('open');
    };

    $scope.setAvatar = function (newAvatar) {
        $scope.user.avatar_id = newAvatar.id;

        $http({
            method: 'PATCH',
            url: Routes.user_path($scope.user.id),
            data: {'user': $scope.user}
        })
            .then(function (data) {
                Materialize.toast('Status' + data.status, 1000);
                $scope.user.avatar = newAvatar;
                $('#avatar-modal').modal('close');
            }, function (data) {
                Materialize.toast(data.status, 1000);
            });
    };

    $scope.submit = function (form) {
        $scope.$submitted = true;

        if (form.$invalid) {
            Materialize.toast('Form is invalid', 1000);
            return;
        }

        $scope.user.preferences = [];
        $('input[type="checkbox"]:checked').each(function () {
            $scope.user.preferences.push({id: $(this).val(), value: $(this).attr('id')});
        });

        $http({
            method: $scope.action,
            url: Routes.user_path($scope.user.id ? $scope.user.id : ''),
            data: {user: $scope.user}
        })
            .then(function (data) {
                Materialize.toast('Status' + data.status, 1000);
            }, function (data) {
                Materialize.toast(data.status, 1000);
            });
    };

    $scope.setup = function () {
        if (!$scope.isReady) {
            $('.modal').modal();
            sortPhotosByPriority($scope.user.photos);

            $scope.isReady = true;
        }
    };

    $scope.rate = function(photo, rating) {
        $('.btn-rating').prop('disabled', true);
        $http({
            method: 'POST',
            url: Routes.user_photo_rates_path($scope.user.id, photo.id),
            data: {rate: {value: rating}}
        })
            .then(function (data) {
                Materialize.toast('Status' + data.status, 1000);
            }, function (data) {
                Materialize.toast(data.status, 1000);
            });
    };

    $scope.editPriorities = function() {
        sortPhotosByPriority($scope.user.photos);
        $scope.isDragDisabled = false;
    };

    $scope.applyPriorities = function() {
        $http({
            method: 'PATCH',
            url: Routes.update_priorities_user_photos_path($scope.user.id),
            data: {photos: $scope.user.photos}
        })
            .then(function (data) {
                Materialize.toast('Status' + data.status, 1000);
            }, function (data) {
                Materialize.toast(data.status, 1000);
            });

        $scope.isDragDisabled = true;
    };

    $scope.discardPriorities = function() {
        $scope.isDragDisabled = true;
    };

    $scope.dragControlListeners = {
        orderChanged: function() {
            for(var i = 0; i < $scope.user.photos.length; i++){
                $scope.user.photos[i].priority = i;
            }
        }
    };

    $scope.checkPreference = function(id) {
        id = id - 0;
        for(i in $scope.user.preferences) {
            var preference = $scope.user.preferences[i];
            if (preference.id == id) {
                return true;
            }
        }
        return false;
    }
});

app.directive('afterRender', ['$timeout', function ($timeout) {
    return {
        restrict: 'A',
            terminal: true,
            transclude: false,
            link: function (scope, element, attrs) {
            $timeout(scope.$eval(attrs.afterRender), 0);  //Calling a scoped method
        }
    };
}]);

function sortPhotosByPriority(photos) {
    photos.sort(function(a,b){
        return a.priority - b.priority;
    });
}

